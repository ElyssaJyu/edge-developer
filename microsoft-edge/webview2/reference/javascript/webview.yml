### YamlMime:TSType
name: WebView
uid: WebView2Script.WebView
package: WebView2Script
summary: >-
  `window.chrome.webview` is the interface to access the WebView2-specific APIs
  that are available

  to the script running within WebView2 Runtime.
fullName: WebView
remarks: ''
isDeprecated: false
type: class
properties:
  - name: EventTarget
    uid: WebView2Script.WebView.EventTarget
    package: WebView2Script
    summary: ''
    fullName: EventTarget
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'EventTarget: { , prototype: EventTarget }'
      return:
        description: ''
        type: '{ , prototype: EventTarget }'
  - name: hostObjects
    uid: WebView2Script.WebView.hostObjects
    package: WebView2Script
    summary: >
      Contains asynchronous proxies for all host objects added via
      `CoreWebView2.AddHostObjectToScript` as well

      as options to configure those proxies, and the container for synchronous
      proxies.

      If you call `coreWebView2.AddHostObjectToScript("myObject", object);` in
      your native code,

      an asynchronous proxy for `object` is available to your web-side code, by
      using `chrome.webview.hostObjects.sync.myObject`.
    fullName: hostObjects
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'hostObjects: HostObjectsAsyncRoot'
      return:
        description: ''
        type: <xref uid="WebView2Script.HostObjectsAsyncRoot" />
inheritedMethods:
  - name: dispatchEvent(Event)
    uid: WebView2Script.WebView.dispatchEvent
    package: WebView2Script
    summary: >-
      Dispatches a synthetic event event to target and returns true if either
      event's cancelable attribute value is false or its preventDefault() method
      was not invoked, and false otherwise.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function dispatchEvent(event: Event): boolean'
      parameters:
        - id: event
          type: Event
          description: ''
      return:
        description: ''
        type: boolean
    inheritanceDescription: <b>Inherited From</b> EventTarget.dispatchEvent
methods:
  - name: >-
      addEventListener(string, EventListenerOrEventListenerObject, boolean |
      AddEventListenerOptions)
    uid: WebView2Script.WebView.addEventListener_1
    package: WebView2Script
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function addEventListener(type: string, listener:
        EventListenerOrEventListenerObject, options?: boolean |
        AddEventListenerOptions)
      parameters:
        - id: type
          type: string
          description: ''
        - id: listener
          type: EventListenerOrEventListenerObject
          description: ''
        - id: options
          type: boolean | AddEventListenerOptions
          description: ''
  - name: >-
      addEventListener<K>(K, (this: WebView, ev: WebViewEventMap[K]) => any,
      boolean | AddEventListenerOptions)
    uid: WebView2Script.WebView.addEventListener
    package: WebView2Script
    summary: >-
      The standard `EventTarget.addEventListener` method. Use it to subscribe to
      the `message` event

      or `sharedbufferreceived` event.

      The `message` event receives messages posted from the WebView2 host via
      `CoreWebView2.PostWebMessageAsJson` or

      `CoreWebView2.PostWebMessageAsString`.

      The `sharedbufferreceived` event receives shared buffers posted from the
      WebView2 host

      via `CoreWebView2.PostSharedBufferToScript`.

      See CoreWebView2.PostWebMessageAsJson(

      [|
      Win32/C++](https://learn.microsoft.com/microsoft-edge/webview2/reference/win32/icorewebview2#postwebmessageasjson),

      [|
      .NET](https://learn.microsoft.com/dotnet/api/microsoft.web.webview2.core.corewebview2.postwebmessageasjson),

      [|
      WinRT](https://learn.microsoft.com/microsoft-edge/webview2/reference/winrt/microsoft_web_webview2_core/corewebview2#postwebmessageasjson)).

      See <xref:EventTarget.addEventListener> for more information.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function addEventListener<K>(type: K, listener: (this: WebView, ev:
        WebViewEventMap[K]) => any, options?: boolean | AddEventListenerOptions)
      parameters:
        - id: type
          type: K
          description: >
            The name of the event to subscribe to. Valid values are `message`,
            and `sharedbufferreceived`.
        - id: listener
          type: '(this: WebView, ev: WebViewEventMap[K]) =&gt; any'
          description: ''
        - id: options
          type: boolean | AddEventListenerOptions
          description: ''
  - name: postMessage(any)
    uid: WebView2Script.WebView.postMessage
    package: WebView2Script
    summary: >-
      When the page calls `postMessage`, the `message` parameter is converted to

      JSON and is posted asynchronously to the WebView2 host process.

      This will result in either the `CoreWebView2.WebMessageReceived` event or

      the `CoreWebView2Frame.WebMessageReceived` event being raised, depending
      on

      if `postMessage` is called from the top-level document in the WebView2 or

      from a child frame.

      See CoreWebView2.WebMessageReceived(

      [|
      Win32/C++](https://learn.microsoft.com/microsoft-edge/webview2/reference/win32/icorewebview2#add_webmessagereceived),

      [|
      .NET](https://learn.microsoft.com/dotnet/api/microsoft.web.webview2.core.corewebview2.webmessagereceived),

      [|
      WinRT](https://learn.microsoft.com/microsoft-edge/webview2/reference/winrt/microsoft_web_webview2_core/corewebview2#webmessagereceived)).

      See CoreWebView2Frame.WebMessageReceived(

      [|
      Win32/C++](https://learn.microsoft.com/microsoft-edge/webview2/reference/win32/icorewebview2frame2#add_webmessagereceived),

      [|
      .NET](https://learn.microsoft.com/dotnet/api/microsoft.web.webview2.core.corewebview2frame.webmessagereceived),

      [|
      WinRT](https://learn.microsoft.com/microsoft-edge/webview2/reference/winrt/microsoft_web_webview2_core/corewebview2frame#webmessagereceived)).
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function postMessage(message: any)'
      parameters:
        - id: message
          type: any
          description: |
            The message to send to the WebView2 host. This can be any
               object that can be serialized to JSON.
  - name: 'postMessageWithAdditionalObjects(any, ArrayLike<any>)'
    uid: WebView2Script.WebView.postMessageWithAdditionalObjects
    package: WebView2Script
    summary: |+
      When the page calls `postMessageWithAdditionalObjects`, the `message`
      parameter is sent to WebView2 in the same fashion as 'postMessage'.
      Objects passed as 'additionalObjects' are converted to their native types
      and will be available in the
      `CoreWebView2WebMessageReceivedEventArgs.AdditionalObjects` property.

      **Example**

      Post a message with File objects from input element to the CoreWebView2:
      ```javascript
      const input = document.getElementById('files');
      input.addEventListener('change', function() {
         // Note that postMessageWithAdditionalObjects does not accept a single object,
         // but only accepts an ArrayLike object.
         // However, input.files is type FileList, which is already an ArrayLike object so
         // no conversion to array is needed.
         const currentFiles = input.files;
         chrome.webview.postMessageWithAdditionalObjects("FilesDropped",
             currentFiles);
      });
      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function postMessageWithAdditionalObjects(message: any,
        additionalObjects: ArrayLike<any>)
      parameters:
        - id: message
          type: any
          description: |-
            The message to send to the WebView2 host. This can be any
            object that can be serialized to JSON.
        - id: additionalObjects
          type: ArrayLike&lt;any&gt;
          description: >-
            A sequence of DOM objects that have native

            representations in WebView2. This parameter needs to be ArrayLike.

            The following DOM types are mapped to native:

            DOM      | Win32       | .NET     | WinRT

            -------- | ------------|----------| --------

            [File](https://developer.mozilla.org/docs/Web/API/File] |
            ICoreWebView2File |
            [System.IO.FileInfo](https://learn.microsoft.com/dotnet/api/system.io.fileinfo)
            |
            [Windows.Storage.StorageFile](https://learn.microsoft.com/uwp/api/windows.storage.storagefile)

            `null` or `undefined` entries will be passed as `null` type in
            WebView2.

            Otherwise if an invalid or unsupported object is passed via this
            API, an exception

            will be thrown and the message will fail to post.
  - name: releaseBuffer(ArrayBuffer)
    uid: WebView2Script.WebView.releaseBuffer
    package: WebView2Script
    summary: >-
      Call with the `ArrayBuffer` from the `chrome.webview.sharedbufferreceived`
      event to release the underlying shared memory resource.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function releaseBuffer(buffer: ArrayBuffer)'
      parameters:
        - id: buffer
          type: ArrayBuffer
          description: >
            An `ArrayBuffer` from the `chrome.webview.sharedbufferreceived`
            event.
  - name: >-
      removeEventListener(string, EventListenerOrEventListenerObject, boolean |
      EventListenerOptions)
    uid: WebView2Script.WebView.removeEventListener_1
    package: WebView2Script
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function removeEventListener(type: string, listener:
        EventListenerOrEventListenerObject, options?: boolean |
        EventListenerOptions)
      parameters:
        - id: type
          type: string
          description: ''
        - id: listener
          type: EventListenerOrEventListenerObject
          description: ''
        - id: options
          type: boolean | EventListenerOptions
          description: ''
  - name: >-
      removeEventListener<K>(K, (this: WebView, ev: WebViewEventMap[K]) => any,
      boolean | EventListenerOptions)
    uid: WebView2Script.WebView.removeEventListener
    package: WebView2Script
    summary: >-
      The standard `EventTarget.removeEventListener` method. Use it to
      unsubscribe to the `message` or `sharedbufferreceived` event.


      See <xref:EventTarget.removeEventListener> for more information.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function removeEventListener<K>(type: K, listener: (this: WebView, ev:
        WebViewEventMap[K]) => any, options?: boolean | EventListenerOptions)
      parameters:
        - id: type
          type: K
          description: >-
            The name of the event to unsubscribe from. Valid values are
            `message` and `sharedbufferreceived`.
        - id: listener
          type: '(this: WebView, ev: WebViewEventMap[K]) =&gt; any'
          description: ''
        - id: options
          type: boolean | EventListenerOptions
          description: ''
extends: EventTarget
